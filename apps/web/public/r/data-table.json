{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:component",
  "title": "Data Table",
  "description": "A data table component",
  "dependencies": [
    "@tanstack/react-table",
    "remeda"
  ],
  "registryDependencies": [
    "table",
    "dropdown-menu",
    "button",
    "input",
    "skeleton",
    "separator"
  ],
  "files": [
    {
      "path": "registry/new-york/data-table/files/react-table.d.ts",
      "content": "import '@tanstack/react-table';\n\ndeclare module '@tanstack/react-table' {\n  interface ColumnMeta {\n    headerClassName?: string;\n    cellClassName?: string;\n    label?: string;\n    numeric?: boolean;\n  }\n\n  // https://github.com/TanStack/table/discussions/4554\n  interface ColumnFiltersOptions<TData extends RowData> {\n    filterFns?: Record<string, FilterFn<TData>>;\n  }\n}\n",
      "type": "registry:file",
      "target": "~/react-table.d.ts"
    },
    {
      "path": "registry/new-york/data-table/hooks/use-data-table.tsx",
      "content": "import { useMemo, useState } from 'react';\n\nimport { Checkbox } from '@/registry/new-york/common/components/ui/checkbox';\nimport type {\n  DataTableProps,\n  UseDataTableReturn,\n} from '@/registry/new-york/data-table/lib/data-table-types';\n\nimport {\n  type ColumnFiltersState,\n  type RowSelectionState,\n  type SortingState,\n  type VisibilityState,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\n// import { getFacetedUniqueValues } from \"../components/custom/data-table/utils/get-faceted-values\";\n\nexport const useDataTable = <TData, TValue>({\n  columns: initColumns,\n  data,\n  selectable,\n  enablePagination,\n  loading,\n  hideToolbar = false,\n  displayIfEmpty = false,\n}: DataTableProps<TData, TValue>): UseDataTableReturn<TData, TValue> => {\n  const defaultVisibility = initColumns.reduce<VisibilityState>(\n    (acc, column) => {\n      if ('accessorKey' in column && typeof column.accessorKey === 'string') {\n        const id = column.id || column.accessorKey.split('.').join('_');\n        if (column.hidden) {\n          acc[id] = !column.hidden;\n        }\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  const [sorting, setSorting] = useState<SortingState>([]);\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\n  const [columnVisibility, setColumnVisibility] =\n    useState<VisibilityState>(defaultVisibility);\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\n\n  // useEffect(() => {\n  //     if (initColumns) {\n  //       const defaultColumnVisibility = initColumns.reduce<{\n  //         [key: string]: boolean;\n  //       }>((acc, column) => {\n  //         console.log(column.id, column.hidden)\n  //         if (column.hidden && column.id) {\n  //           acc[column.id] = !column.hidden;\n  //         }\n\n  //         return acc;\n  //       }, {});\n  //       setColumnVisibility(defaultColumnVisibility);\n  //     }\n\n  // }, [initColumns])\n\n  const columns = useMemo(() => {\n    if (selectable) {\n      return [\n        {\n          id: 'select',\n          header: ({ table }) => (\n            <Checkbox\n              aria-label=\"Select all\"\n              checked={\n                table.getIsAllPageRowsSelected() ||\n                (table.getIsSomePageRowsSelected() && 'indeterminate')\n              }\n              onCheckedChange={(value) => {\n                table.toggleAllPageRowsSelected(Boolean(value));\n              }}\n            />\n          ),\n          cell: ({ row }) => (\n            <Checkbox\n              aria-label=\"Select row\"\n              checked={row.getIsSelected()}\n              onCheckedChange={(value) => {\n                row.toggleSelected(Boolean(value));\n              }}\n            />\n          ),\n          enableSorting: false,\n          enableHiding: false,\n        },\n        ...initColumns,\n      ];\n    }\n\n    return initColumns.filter((col) => !col.remove);\n  }, [initColumns, selectable]);\n\n  const selectedRows = useMemo(() => {\n    return data.filter((_row, idx) => rowSelection[idx]);\n  }, [data, rowSelection]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n    ...(enablePagination\n      ? {\n          getPaginationRowModel: getPaginationRowModel(),\n        }\n      : {}),\n  });\n\n  return {\n    // table,\n    // columns,\n    // // data,\n    // enablePagination: enablePagination || false,\n    // selectable: selectable || false,\n    // sorting,\n    // setSorting,\n    // columnFilters,\n    // setColumnFilters,\n    // columnVisibility,\n    // setColumnVisibility,\n    // rowSelection,\n    // setRowSelection,\n    hideToolbar,\n    displayIfEmpty,\n    loading: loading || false,\n    selectedRows,\n    table,\n    columns,\n    selectable: selectable || false,\n    enablePagination: enablePagination || false,\n  };\n};\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/data-table/lib/data-table-types.ts",
      "content": "import type {\n  Column as OrigColumn,\n  ColumnDef as OrigColumnDef,\n  Header as OrigHeader,\n  Table,\n} from '@tanstack/react-table';\n// import { z } from 'zod';\n\nexport type ColumnDef<TData> = OrigColumnDef<TData> & {\n  //   sortable?: boolean;\n  // numeric?: boolean;\n  center?: boolean;\n  hidden?: boolean;\n  remove?: boolean;\n\n  //   hideable?: boolean;\n};\n\nexport type Column<TData, TValue> = Omit<\n  OrigColumn<TData, TValue>,\n  'columnDef'\n> & {\n  columnDef: ColumnDef<TData>;\n};\n\nexport type Header<TData, TValue> = Omit<\n  OrigHeader<TData, TValue>,\n  'column'\n> & {\n  column: Column<TData, TValue>;\n};\n\nexport interface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData>[];\n  data: TData[];\n  enablePagination?: boolean;\n  selectable?: boolean;\n  loading?: boolean;\n  hideToolbar?: boolean;\n  displayIfEmpty?: boolean;\n}\n\n// type TableComponentType<TData, TValue> = Omit<\n//   DataTableProps<TData, TValue>,\n//   \"data\"\n// >;\n\nexport interface TableComponentType<TData, TValue>\n  extends Omit<DataTableProps<TData, TValue>, 'data'> {\n  table: Table<TData>;\n  // sorting: SortingState;\n  // setSorting: Dispatch<SetStateAction<SortingState>>;\n  // columnFilters: ColumnFiltersState;\n  // setColumnFilters: Dispatch<SetStateAction<ColumnFiltersState>>;\n  // columnVisibility: VisibilityState;\n  // setColumnVisibility: Dispatch<SetStateAction<VisibilityState>>;\n  // rowSelection: RowSelectionState;\n  // setRowSelection: Dispatch<SetStateAction<RowSelectionState>>;\n  selectedRows: TData[];\n}\nexport type UseDataTableReturn<TData, TValue> = Required<\n  TableComponentType<TData, TValue>\n>;\n\nexport type DataTableComponentProps<TData, TValue> = Omit<\n  UseDataTableReturn<TData, TValue>,\n  'selectedRows' | 'hideToolbar' | 'displayIfEmpty'\n>;\n\n// export const DataTableRowActionType = z.enum(['update', 'delete']);\n\n// export type DataTableRowActionType = z.infer<typeof DataTableRowActionType>;\n\n// export type DataTableRowAction<TData> = {\n//   row: Row<TData>;\n//   type: DataTableRowActionType;\n// };\n\nexport type StringKeyOf<TData> = Extract<keyof TData, string>;\n\nexport interface Option {\n  label: string;\n  value: string;\n  icon?: React.ComponentType<{ className?: string }>;\n  count?: number;\n}\n\n// export type ColumnType = DataTableConfig['columnTypes'][number];\n\nexport interface DataTableFilterField<TData> {\n  id: StringKeyOf<TData>;\n  label: string;\n  placeholder?: string;\n  options?: Option[];\n}\n\n// export interface DataTableAdvancedFilterField<TData>\n//   extends DataTableFilterField<TData> {\n//   type: ColumnType;\n// }\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/new-york/data-table/lib/data-table-utils.ts",
      "content": "import type { Column } from '@/registry/new-york/data-table/lib/data-table-types';\nimport {\n  pipe,\n  prop,\n  capitalize as rCapitalize,\n  sortBy,\n  toKebabCase,\n} from 'remeda';\n\nexport function toSentenceCase(str: string) {\n  return pipe(str, toKebabCase(), (s) => s.replace(/-/g, ' '), rCapitalize());\n}\n\nexport const formatFacets = <TData, TValue>(column?: Column<TData, TValue>) => {\n  const facets = column?.getFacetedUniqueValues() || new Map<unknown, number>();\n\n  const options = Array.from(facets, ([value, count]) => ({\n    value,\n    label: value,\n    count,\n  }));\n\n  return sortBy(options, [prop('count'), 'desc']);\n};",
      "type": "registry:lib"
    },
    {
      "path": "registry/new-york/data-table/components/ui/data-table-body.tsx",
      "content": "import type { DataTableComponentProps } from '@/registry/new-york/data-table/lib/data-table-types';\nimport { flexRender } from '@tanstack/react-table';\n\nimport { Skeleton } from '@/registry/new-york/common/components/ui/skeleton';\nimport {\n  TableBody,\n  TableCell,\n  TableRow,\n} from '@/registry/new-york/common/components/ui/table';\nimport { cn } from '@/registry/new-york/common/lib/utils';\n\nexport const DataTableBody = <TData, TValue>({\n  columns,\n  table,\n  loading,\n}: Omit<\n  DataTableComponentProps<TData, TValue>,\n  'selectable' | 'enablePagination'\n>) => {\n  if (loading) {\n    const rowCount = 5;\n    return (\n      <TableBody>\n        {Array.from({ length: rowCount }).map((_, index) => (\n          <TableRow key={index}>\n            {table.getVisibleFlatColumns().map((col) => {\n              return (\n                <TableCell key={col.id}>\n                  <Skeleton className=\"h-6\" />\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        ))}\n      </TableBody>\n    );\n  }\n  return (\n    <TableBody>\n      {table.getRowModel().rows.length ? (\n        table.getRowModel().rows.map((row) => (\n          <TableRow data-state={row.getIsSelected() && 'selected'} key={row.id}>\n            {row.getVisibleCells().map((cell) => (\n              <TableCell\n                key={cell.id}\n                className={cn({\n                  'text-right': cell.column.columnDef.meta?.numeric,\n                })}\n                style={{\n                  maxWidth: cell.column.columnDef.maxSize,\n                }}\n              >\n                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n              </TableCell>\n            ))}\n          </TableRow>\n        ))\n      ) : (\n        <TableRow>\n          <TableCell className=\"h-24 text-center\" colSpan={columns.length}>\n            No results.\n          </TableCell>\n        </TableRow>\n      )}\n    </TableBody>\n  );\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/data-table/components/ui/data-table-column-header.tsx",
      "content": "import { Button } from '@/registry/new-york/common/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/registry/new-york/common/components/ui/dropdown-menu';\nimport { cn } from '@/registry/new-york/common/lib/utils';\nimport type {\n  Column,\n  Header,\n} from '@/registry/new-york/data-table/lib/data-table-types';\nimport { formatFacets } from '@/registry/new-york/data-table/lib/data-table-utils';\nimport { flexRender } from '@tanstack/react-table';\nimport {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  ChevronsUpDown,\n  EllipsisVertical,\n  EyeOff,\n} from 'lucide-react';\n\ninterface DataTableColumnHeaderProps<TData, TValue>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  header: Header<TData, TValue>;\n  // title: string\n}\n\nexport function DataTableColumnHeader<TData, TValue>({\n  header,\n\n  className,\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  const column = header.column;\n\n  const {\n    enableSorting: sortable,\n    enableHiding: hideable,\n    enableColumnFilter: filterable,\n  } = column.columnDef;\n\n  if ((hideable || sortable || filterable) && column.getCanSort()) {\n    return (\n      <div\n        className={cn(\n          'flex items-center space-x-2',\n          column.columnDef.meta?.numeric && 'justify-end',\n          column.columnDef.center && 'justify-center',\n          filterable && 'justify-between',\n          className\n        )}\n      >\n        {hideable || sortable ? (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                className=\"-ml-3 h-8 data-[state=open]:bg-accent\"\n                size=\"sm\"\n                variant=\"ghost\"\n              >\n                <span>\n                  {flexRender(column.columnDef.header, header.getContext())}\n                </span>\n\n                {column.getIsSorted() === 'desc' ? (\n                  <ArrowDownIcon className=\"ml-2 h-4 w-4\" />\n                ) : column.getIsSorted() === 'asc' ? (\n                  <ArrowUpIcon className=\"ml-2 h-4 w-4\" />\n                ) : (\n                  <ChevronsUpDown className=\"ml-2 h-4 w-4\" />\n                )}\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"start\">\n              <DropdownMenuItem\n                onClick={() => {\n                  column.toggleSorting(false);\n                }}\n              >\n                <ArrowUpIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n                Asc\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                onClick={() => {\n                  column.toggleSorting(true);\n                }}\n              >\n                <ArrowDownIcon className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n                Desc\n              </DropdownMenuItem>\n              {hideable ? (\n                <>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem\n                    onClick={() => {\n                      column.toggleVisibility(false);\n                    }}\n                  >\n                    <EyeOff className=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n                    Hide\n                  </DropdownMenuItem>\n                </>\n              ) : null}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        ) : (\n          <div className={cn(className)}>\n            {flexRender(column.columnDef.header, header.getContext())}\n          </div>\n        )}\n\n        {filterable ? (\n          <Filter column={column} facets={formatFacets(column)} />\n        ) : null}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex items-center space-x-2',\n        column.columnDef.meta?.numeric && 'justify-end',\n        column.columnDef.center && 'justify-center',\n        filterable && 'justify-between',\n        className\n      )}\n    >\n      {flexRender(column.columnDef.header, header.getContext())}\n    </div>\n  );\n}\n\nfunction Filter<TData, TValue>({\n  column,\n  facets,\n}: {\n  facets: {\n    label: string;\n    value: unknown;\n    count: number;\n  }[];\n  column: Column<TData, TValue>;\n}) {\n  if (facets.length <= 1) {\n    return null;\n  }\n  const columnFilterValue = column.getFilterValue();\n\n  const isChecked = (value: unknown) => {\n    let checked = false;\n    if (Array.isArray(columnFilterValue)) {\n      checked = columnFilterValue.includes(value);\n    }\n\n    return checked;\n  };\n\n  const handleCheck = (value: unknown) => {\n    if (Array.isArray(columnFilterValue)) {\n      if (columnFilterValue.includes(value)) {\n        column.setFilterValue(columnFilterValue.filter((n) => n !== value));\n      } else {\n        column.setFilterValue([...columnFilterValue, value]);\n      }\n    } else {\n      column.setFilterValue([value]);\n    }\n  };\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          className=\"-ml-3 h-8 data-[state=open]:bg-accent\"\n          size=\"sm\"\n          variant=\"ghost\"\n        >\n          <EllipsisVertical />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"max-h-screen overflow-scroll\">\n        {facets.map((facet) => (\n          <DropdownMenuCheckboxItem\n            // checked={showStatusBar}\n            key={facet.label}\n            checked={isChecked(facet.value)}\n            // onCheckedChange={setShowStatusBar}\n            onCheckedChange={() => {\n              // column.setFilterValue([facet.value]);\n              handleCheck(facet.value);\n            }}\n          >\n            {facet.label}\n          </DropdownMenuCheckboxItem>\n\n          // <DropdownMenuItem className=\"flex space-x-2\" key={facet.value}>\n          //   <Checkbox />\n          //   <Label>{facet.name}</Label>\n          //   {/* {facet.name} */}\n          // </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/data-table/components/ui/data-table-component.tsx",
      "content": "import {\n  Table,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/registry/new-york/common/components/ui/table';\nimport { DataTableBody } from '@/registry/new-york/data-table/components/ui/data-table-body';\nimport { DataTableColumnHeader } from '@/registry/new-york/data-table/components/ui/data-table-column-header';\nimport { DataTablePagination } from '@/registry/new-york/data-table/components/ui/data-table-pagination';\nimport type { DataTableComponentProps } from '@/registry/new-york/data-table/lib/data-table-types';\n\n// TODO: Improve functionality of DataTable\n// https://github.com/sadmann7/shadcn-table/tree/main\n\nexport function DataTableComponent<TData, TValue>({\n  columns,\n  selectable,\n  enablePagination,\n  loading,\n  table,\n}: DataTableComponentProps<TData, TValue>) {\n  return (\n    <div className=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => {\n                return (\n                  <TableHead\n                    key={header.id}\n                    style={{\n                      maxWidth: header.column.columnDef.maxSize,\n                    }}\n                  >\n                    {header.isPlaceholder ? null : (\n                      <DataTableColumnHeader header={header} />\n                    )}\n                  </TableHead>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <DataTableBody columns={columns} table={table} loading={loading} />\n      </Table>\n      {enablePagination && !loading ? (\n        <DataTablePagination selectable={selectable} table={table} />\n      ) : null}\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/data-table/components/ui/data-table-faceted-filter.tsx",
      "content": "import { flexRender } from '@tanstack/react-table';\nimport { Check, PlusCircle } from 'lucide-react';\n\nimport { Badge } from '@/registry/new-york/common/components/ui/badge';\nimport { Button } from '@/registry/new-york/common/components/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from '@/registry/new-york/common/components/ui/command';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/registry/new-york/common/components/ui/popover';\nimport { Separator } from '@/registry/new-york/common/components/ui/separator';\nimport { cn } from '@/registry/new-york/common/lib/utils';\nimport type {\n  Column,\n  Header,\n} from '@/registry/new-york/data-table/lib/data-table-types';\nimport { formatFacets } from '@/registry/new-york/data-table/lib/data-table-utils';\n\ninterface DataTableFacetedFilterProps<TData, TValue> {\n  column?: Column<TData, TValue>;\n  header?: Header<TData, TValue>;\n  // title?: string;\n  //   options: Option[];\n}\n\nexport function DataTableFacetedFilter<TData, TValue>({\n  column,\n  header,\n  // title,\n  //   options,\n}: DataTableFacetedFilterProps<TData, TValue>) {\n  const options = formatFacets(column);\n  if (options.length <= 1) {\n    return null;\n  }\n  const title = column?.columnDef.header?.toString();\n\n  const unknownValue = column?.getFilterValue();\n  const selectedValues = new Set(\n    Array.isArray(unknownValue) ? unknownValue : []\n  );\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"h-8 border-dashed\">\n          <PlusCircle className=\"size-4\" />\n          {header\n            ? flexRender(column?.columnDef.header, header.getContext())\n            : title}\n\n          {selectedValues?.size > 0 && (\n            <>\n              <Separator orientation=\"vertical\" className=\"mx-2 h-4\" />\n              <Badge className=\"border-transparent bg-muted px-1 font-normal text-muted-foreground hover:bg-muted/80 lg:hidden\">\n                {selectedValues.size}\n              </Badge>\n              <div className=\"hidden space-x-1 lg:flex\">\n                {selectedValues.size > 2 ? (\n                  <Badge className=\"border-transparent bg-muted px-1 font-normal text-muted-foreground hover:bg-muted/80\">\n                    {selectedValues.size} selected\n                  </Badge>\n                ) : (\n                  options\n                    .filter((option) => selectedValues.has(option.value))\n                    .map((option) => (\n                      <Badge\n                        key={option.value}\n                        className=\"border-transparent bg-muted px-1 font-normal text-muted-foreground hover:bg-muted/80\"\n                      >\n                        {option.label}\n                      </Badge>\n                    ))\n                )}\n              </div>\n            </>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[12.5rem] p-0\" align=\"start\">\n        <Command>\n          <CommandInput placeholder={title} />\n          <CommandList className=\"max-h-full\">\n            <CommandEmpty>No results found.</CommandEmpty>\n            <CommandGroup className=\"max-h-[18.75rem] overflow-y-auto overflow-x-hidden\">\n              {options.map((option) => {\n                const isSelected = selectedValues.has(option.value);\n\n                return (\n                  <CommandItem\n                    key={option.value}\n                    onSelect={() => {\n                      if (isSelected) {\n                        selectedValues.delete(option.value);\n                      } else {\n                        selectedValues.add(option.value);\n                      }\n                      const filterValues = Array.from(selectedValues);\n                      column?.setFilterValue(\n                        filterValues.length ? filterValues : undefined\n                      );\n                    }}\n                  >\n                    <div\n                      className={cn(\n                        'mr-2 flex size-4 items-center justify-center rounded-sm border border-primary',\n                        isSelected\n                          ? 'bg-primary text-primary-foreground'\n                          : 'opacity-50 [&_svg]:invisible'\n                      )}\n                    >\n                      <Check className=\"size-4\" aria-hidden=\"true\" />\n                    </div>\n                    {/*option.icon && (\n                      <option.icon\n                        className=\"mr-2 size-4 text-muted-foreground\"\n                        aria-hidden=\"true\"\n                      />\n                    ) */}\n                    <span>{option.label}</span>\n                    {option.count && (\n                      <span className=\"ml-auto flex size-4 items-center justify-center font-mono text-xs\">\n                        {option.count}\n                      </span>\n                    )}\n                  </CommandItem>\n                );\n              })}\n            </CommandGroup>\n            {selectedValues.size > 0 && (\n              <>\n                <CommandSeparator />\n                <CommandGroup>\n                  <CommandItem\n                    onSelect={() => column?.setFilterValue(undefined)}\n                    className=\"justify-center text-center\"\n                  >\n                    Clear filters\n                  </CommandItem>\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/data-table/components/ui/data-table-pagination.tsx",
      "content": "import { Button } from '@/registry/new-york/common/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/registry/new-york/common/components/ui/select';\nimport { Separator } from '@/registry/new-york/common/components/ui/separator';\nimport type { Table } from '@tanstack/react-table';\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  ChevronsLeft,\n  ChevronsRight,\n} from 'lucide-react';\n\ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>;\n  selectable?: boolean;\n}\n\nexport function DataTablePagination<TData>({\n  table,\n  selectable,\n}: DataTablePaginationProps<TData>) {\n  return (\n    <>\n      <Separator />\n      <div className=\"flex items-center justify-between px-2 py-2\">\n        {selectable ? (\n          <div className=\"flex-1 text-muted-foreground text-sm\">\n            {table.getFilteredSelectedRowModel().rows.length} of{' '}\n            {table.getFilteredRowModel().rows.length} row(s) selected.\n          </div>\n        ) : null}\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"font-medium text-sm\">Rows per page</p>\n          <Select\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}\n            value={`${table.getState().pagination.pageSize}`}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 30, 40, 50].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex items-center \">\n          <div className=\"flex w-[100px] items-center justify-center font-medium text-sm\">\n            Page {table.getState().pagination.pageIndex + 1} of{' '}\n            {table.getPageCount()}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              disabled={!table.getCanPreviousPage()}\n              onClick={() => {\n                table.setPageIndex(0);\n              }}\n              variant=\"outline\"\n            >\n              <span className=\"sr-only\">Go to first page</span>\n              <ChevronsLeft className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              className=\"h-8 w-8 p-0\"\n              disabled={!table.getCanPreviousPage()}\n              onClick={() => {\n                table.previousPage();\n              }}\n              variant=\"outline\"\n            >\n              <span className=\"sr-only\">Go to previous page</span>\n              <ChevronLeftIcon className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              className=\"h-8 w-8 p-0\"\n              disabled={!table.getCanNextPage()}\n              onClick={() => {\n                table.nextPage();\n              }}\n              variant=\"outline\"\n            >\n              <span className=\"sr-only\">Go to next page</span>\n              <ChevronRightIcon className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              disabled={!table.getCanNextPage()}\n              onClick={() => {\n                table.setPageIndex(table.getPageCount() - 1);\n              }}\n              variant=\"outline\"\n            >\n              <span className=\"sr-only\">Go to last page</span>\n              <ChevronsRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/data-table/components/ui/data-table-toolbar.tsx",
      "content": "'use client';\nimport { X } from 'lucide-react';\nimport * as React from 'react';\n\nimport { Button } from '@/registry/new-york/common/components/ui/button';\nimport { Input } from '@/registry/new-york/common/components/ui/input';\nimport { cn } from '@/registry/new-york/common/lib/utils';\nimport { DataTableFacetedFilter } from '@/registry/new-york/data-table/components/ui/data-table-faceted-filter';\nimport { DataTableViewOptions } from '@/registry/new-york/data-table/components/ui/data-table-view-options';\nimport type { UseDataTableReturn } from '@/registry/new-york/data-table/lib/data-table-types';\n\ninterface DataTableToolbarProps<TData, TValue>\n  extends React.HTMLAttributes<HTMLDivElement>,\n    Pick<UseDataTableReturn<TData, TValue>, 'table' | 'displayIfEmpty'> {}\n\nexport function DataTableToolbar<TData, TValue>({\n  table,\n  //   filterFields = [],\n  children,\n  className,\n  displayIfEmpty,\n  ...props\n}: DataTableToolbarProps<TData, TValue>) {\n  const filterFields = React.useMemo(() => {\n    return table\n      .getAllColumns()\n      .filter((column) => column.columnDef.enableColumnFilter)\n      .map((column) => {\n        const header = table.getFlatHeaders().find((h) => h.id === column.id);\n        return { column, header };\n      });\n  }, [table]);\n\n  const viewColumns = React.useMemo(() => {\n    const headers = table.getFlatHeaders();\n    const res = table\n      .getAllColumns()\n      .filter(\n        (column) =>\n          typeof column.accessorFn !== 'undefined' &&\n          column.getCanHide() &&\n          column.columnDef.enableHiding\n      )\n      .map((column) => {\n        const header = headers.find((header) => header.id === column.id);\n        return {\n          column,\n          header,\n        };\n      });\n    return res;\n  }, [table]);\n\n  const isFiltered = table.getState().columnFilters.length > 0;\n\n  // Memoize computation of searchableColumns and filterableColumns\n  const { searchableColumns, filterableColumns } = React.useMemo(() => {\n    return {\n      searchableColumns: filterFields.filter((_field) => false),\n      filterableColumns: filterFields.filter((_field) => true),\n    };\n  }, [filterFields]);\n\n  if (\n    !searchableColumns.length &&\n    !filterableColumns.length &&\n    !children &&\n    !viewColumns.length\n  ) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex w-full items-center justify-between gap-2 overflow-auto p-1',\n        className\n      )}\n      {...props}\n    >\n      <div className=\"flex flex-1 items-center gap-2\">\n        {searchableColumns.length > 0 &&\n          searchableColumns.map((field) => {\n            const column = field.column;\n            return (\n              table.getColumn(column.id ? String(column.id) : '') && (\n                <Input\n                  key={String(column.id)}\n                  //   placeholder={column.placeholder}\n                  value={\n                    (table\n                      .getColumn(String(column.id))\n                      ?.getFilterValue() as string) ?? ''\n                  }\n                  onChange={(event) =>\n                    table\n                      .getColumn(String(column.id))\n                      ?.setFilterValue(event.target.value)\n                  }\n                  className=\"h-8 w-40 lg:w-64\"\n                />\n              )\n            );\n          })}\n        {filterableColumns.length > 0 &&\n          filterableColumns.map(\n            ({ column, header }) =>\n              table.getColumn(column.id ? String(column.id) : '') && (\n                <DataTableFacetedFilter\n                  key={String(column.id)}\n                  header={header}\n                  column={table.getColumn(column.id ? String(column.id) : '')}\n                  //   title={column.label}\n                  //   options={column.options ?? []}\n                />\n              )\n          )}\n        {isFiltered && (\n          <Button\n            aria-label=\"Reset filters\"\n            variant=\"ghost\"\n            className=\"h-8 px-2 lg:px-3\"\n            onClick={() => table.resetColumnFilters()}\n          >\n            Reset\n            <X className=\"ml-2 size-4\" aria-hidden=\"true\" />\n          </Button>\n        )}\n      </div>\n      <div className=\"flex items-center gap-2\">\n        {children}\n\n        <DataTableViewOptions\n          hidden={!displayIfEmpty && !viewColumns.length}\n          viewColumns={viewColumns}\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/data-table/components/ui/data-table-view-options.tsx",
      "content": "'use client';\nimport { Check, ChevronsUpDown, Settings2 } from 'lucide-react';\nimport * as React from 'react';\n\nimport { Button } from '@/registry/new-york/common/components/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/registry/new-york/common/components/ui/command';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/registry/new-york/common/components/ui/popover';\nimport { cn } from '@/registry/new-york/common/lib/utils';\nimport type {\n  Column,\n  Header,\n} from '@/registry/new-york/data-table/lib/data-table-types';\nimport { toSentenceCase } from '@/registry/new-york/data-table/lib/data-table-utils';\n\ninterface DataTableViewOptionsProps<TData> {\n  //   table: Table<TData>;\n  hidden?: boolean;\n  viewColumns: {\n    column: Column<TData, unknown>;\n    header: Header<TData, unknown> | undefined;\n  }[];\n}\n\nexport function DataTableViewOptions<TData>({\n  viewColumns,\n  hidden,\n}: DataTableViewOptionsProps<TData>) {\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n\n  if (hidden) {\n    return null;\n  }\n\n  return (\n    <Popover modal>\n      <PopoverTrigger asChild>\n        <Button\n          ref={triggerRef}\n          aria-label=\"Toggle columns\"\n          variant=\"outline\"\n          //   role=\"combobox\"\n          size=\"sm\"\n          className=\"ml-auto hidden h-8 gap-2 focus:outline-none focus:ring-1 focus:ring-ring focus-visible:ring-0 lg:flex\"\n        >\n          <Settings2 className=\"size-4\" />\n          View\n          <ChevronsUpDown className=\"ml-auto size-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        align=\"end\"\n        className=\"w-44 p-0\"\n        onCloseAutoFocus={() => triggerRef.current?.focus()}\n      >\n        <Command>\n          <CommandInput placeholder=\"Search columns...\" />\n          <CommandList>\n            <CommandEmpty>No columns found.</CommandEmpty>\n            <CommandGroup>\n              {viewColumns.map(({ column }) => {\n                return (\n                  <CommandItem\n                    key={column.id}\n                    onSelect={() =>\n                      column.toggleVisibility(!column.getIsVisible())\n                    }\n                  >\n                    <span className=\"truncate\">\n                      {column.columnDef.header?.toString() ||\n                        toSentenceCase(column.id)}\n                    </span>\n                    <Check\n                      className={cn(\n                        'ml-auto size-4 shrink-0',\n                        column.getIsVisible() ? 'opacity-100' : 'opacity-0'\n                      )}\n                    />\n                  </CommandItem>\n                );\n              })}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/data-table/components/ui/data-table.tsx",
      "content": "import { DataTableComponent } from '@/registry/new-york/data-table/components/ui/data-table-component';\nimport { DataTableToolbar } from '@/registry/new-york/data-table/components/ui/data-table-toolbar';\nimport type { UseDataTableReturn } from '@/registry/new-york/data-table/lib/data-table-types';\n\ntype DataTableProps<TData, TValue> = UseDataTableReturn<TData, TValue> & {};\n\nexport function DataTable<TData, TValue>({\n  columns,\n  selectable,\n  enablePagination,\n  table,\n  loading,\n  hideToolbar,\n  displayIfEmpty,\n}: DataTableProps<TData, TValue>) {\n  const toolbarHide = loading || hideToolbar;\n  return (\n    <div className=\"flex flex-col gap-2\">\n      {!toolbarHide && (\n        <DataTableToolbar displayIfEmpty={displayIfEmpty} table={table} />\n      )}\n\n      <DataTableComponent\n        loading={loading}\n        columns={columns}\n        selectable={selectable}\n        enablePagination={enablePagination}\n        table={table}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}